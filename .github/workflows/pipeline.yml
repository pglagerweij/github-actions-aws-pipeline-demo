name: demo-pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
env:
  AWS_REGION: <<REGION>>
  AWS_ACCOUNT_ID: <<ACCOUNT_ID>>
  PR_ROLE: github_readonly  
  MAIN_ROLE: github_readwrite

permissions:
  id-token: write
  contents: read   

jobs:
  terraform-pipeline:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials for PR role
        uses: aws-actions/configure-aws-credentials@v1.6.1
        if: github.event_name == 'pull_request'
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PR_ROLE }}
          role-session-name: github-demo
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure AWS credentials for main branch role
        uses: aws-actions/configure-aws-credentials@v1.6.1
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.MAIN_ROLE }}
          role-session-name: github-demo
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          EXITCODE=0
          terraform plan -detailed-exitcode -out plan || EXITCODE=$?
          echo "EXITCODE: $EXITCODE"
          if [ $EXITCODE -eq 0 ]; then
            echo "::set-output name=planresult::unchanged"
          elif [ $EXITCODE -eq 2 ]; then
            echo "::set-output name=planresult::success"
          else
            echo "::set-output name=planresult::error"
          fi
      - name: Terraform show plan output
        uses: mathiasvr/command-output@v1
        if: github.event_name == 'pull_request' && steps.plan.outputs.planresult == 'success'
        id: plan_output
        with:
          run: terraform show -no-color plan
      - name: Comment on PR on success
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && steps.plan.outputs.planresult == 'success'
        env:
          PLAN: "${{ steps.plan_output.outputs.stdout }}"
        with:
          script: |
            const output = `##### Plan:
            ###### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            ###### Terraform Plan üìñ\`${{ steps.plan.outputs.planresult }}\`
            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \n\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Comment on PR on error
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && steps.plan.outputs.planresult == 'error'
        with:
          script: |
            const output = `##### Plan:
            ###### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            ###### Terraform Plan üìñ\`${{ steps.plan.outputs.planresult }}\`

            \`\`\`terraform\n
            ${{ steps.plan.outputs.stdout }}
            ${{ steps.plan.outputs.stderr }}
            \n\`\`\`
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'error'
        run: |
          echo "Terraform plan returned ${{ steps.plan.outputs.planresult }}"
          exit 1 
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
